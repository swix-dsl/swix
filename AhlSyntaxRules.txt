AHL stands for Another Hierarchy Language and allows to define nested structures similar to XML but with less noise.
Also it allows defining of default attribute values to reduce noise even further. AHL document consists of several 
sections (each starts with keyword, see below). Section may specify default attribute values and contain other sections
and/or items.

Colon at the beginning of the line marks keywords. Each keyword starts a section or subsection.

Section may contain one or more child items or other subsections, etc. Each item has one key attribute which is always
mandatory and stated first in the item line. 

As type of children is never stated, any section can contain only one type of children. In other words, children type is fully 
specified with parent section type. If section could have more than one type of items - it should have subsections.

Optionally line can then contain double colons (::) which starts list of non-key attribute setters. Non-key attributes could 
be mandatory or not. Each non-key attribute seter has form <attr-name>=<attr-value>.

Non-key attribute setters separated with comma (,). If double colon (::) or comma (,) ends current line - next line counts as
line continuation and its indent is ignored.

AHL is case-sensitive.

Indent marks nesting and is important; concrete indent size is not important, but all children of a particular item or subsection
should have exactly same indent. 

Any attribute value containing ' ', ',', '=', '!', '?' or '"' should be enclosed in double quotes. Double quotes in 
the content should be represented with doubling (""), e.g. string value a"b would be represented correctly as "a""b".

Sections could specify defaults for any applicable attributes of its direct or indirect children. If several nested levels 



Additional
==========
1. Alternative syntax for specifying one item in specific section:
    :my-section
	  !my-subsection item-key-1 :: item-attribute=attribute-value-1
	  !my-subsection item-key-2 :: item-attribute=attribute-value-2

  instead of
    :my-section
	  :my-subsection
	    item-key-1 :: item-attribute=attribute-value-1
		item-key-2 :: item-attribute=attribute-value-2

  May be especially useful when there's many sections with small number of items (1-2).

2. Alternative syntax for attributes:
    :my-section
	  my-item
	    ?item-attribute=attribute-value-1

   May eliminate need to parse several lines of attributes. Also may be more convenient with long attributes or
   for copy&paste.
   Also allows to set default attributes for root section which doesn't have separate node.

   Another application: suppose scope of alternatively-specified attribute defined as "below its declaration".
   Then it is possible to have different defaults in the same scope without redeclaring it again, like below:

     :my-section :: attr=10
	   item-with-10
	   ?attr=15
	   item-with-15